\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}A Vague Introduction to (a) Type Theory}{1}{section.1}\protected@file@percent }
\citation{UF13}
\citation{Rij22}
\citation{UF13}
\@writefile{tdo}{\contentsline {todo}{\color@fb@x {}{black}{}{orange!40}{\leavevmode {\color  {orange!40}o}}\ $\lambda $ notation for functions. Maybe an example of an inductive type.}{2}{section*.3}\protected@file@percent }
\pgfsyspdfmark {pgfid1}{20088094}{23686226}
\citation{UF13}
\citation{Rij22}
\@writefile{tdo}{\contentsline {todo}{\color@fb@x {}{black}{}{orange!40}{\leavevmode {\color  {orange!40}o}}\ Type formation, introduction, elimination and computation rules. Empty, product and coproduct and non-dependent function types. Compare to category theory. Talk about substitution!}{3}{section*.5}\protected@file@percent }
\pgfsyspdfmark {pgfid2}{20088094}{27024261}
\@writefile{tdo}{\contentsline {todo}{\color@fb@x {}{black}{}{orange!40}{\leavevmode {\color  {orange!40}o}}\ Short section of correspondence of product/coproduct/function types and logical operators. Predicates as $A\to \mathcal  {U}$}{3}{section*.7}\protected@file@percent }
\pgfsyspdfmark {pgfid3}{20088094}{23360729}
\@writefile{toc}{\contentsline {section}{\numberline {2}Type Families, Dependent and Identity Types}{3}{section.2}\protected@file@percent }
\@writefile{tdo}{\contentsline {todo}{\color@fb@x {}{black}{}{orange!40}{\leavevmode {\color  {orange!40}o}}\ outline the rules.}{4}{section*.8}\protected@file@percent }
\pgfsyspdfmark {pgfid4}{19184690}{10414816}
\pgfsyspdfmark {pgfid7}{34584645}{10353165}
\pgfsyspdfmark {pgfid8}{37038956}{10203955}
\citation{UF13}
\@writefile{toc}{\contentsline {section}{\numberline {3}Uniqueness of Identity and Homotopy Type Theory}{6}{section.3}\protected@file@percent }
\@writefile{tdo}{\contentsline {todo}{\color@fb@x {}{black}{}{orange!40}{\leavevmode {\color  {orange!40}o}}\ I don't know where to put this in the notes: A proposition is a type $A$ with a term of type $$\mathsf  {isProp}(A):\equiv \DOTSB \prod@ \slimits@ _{x,y:A}x=_Ay$$ i.e., $A$ is empty or contractible.}{6}{section*.11}\protected@file@percent }
\pgfsyspdfmark {pgfid9}{20088094}{28813652}
\bibcite{UF13}{UF13}
\bibcite{Rij22}{Rij22}
\@writefile{tdo}{\contentsline {todo}{\color@fb@x {}{black}{}{orange!40}{\leavevmode {\color  {orange!40}o}}\ In the extended notes: talk about the universal properties implied by funext.}{9}{section*.14}\protected@file@percent }
\pgfsyspdfmark {pgfid10}{20088094}{43433861}
\@writefile{tdo}{\contentsline {todo}{\color@fb@x {}{black}{}{orange!40}{\leavevmode {\color  {orange!40}o}}\ Circle.}{9}{section*.16}\protected@file@percent }
\pgfsyspdfmark {pgfid11}{20088094}{25731538}
\@writefile{toc}{\contentsline {section}{\numberline {4}Truncations and Logical Aspects}{9}{section.4}\protected@file@percent }
\@writefile{tdo}{\contentsline {todo}{\color@fb@x {}{black}{}{orange!40}{\leavevmode {\color  {orange!40}o}}\ Propositions, sets, ``universal property" of the propositional truncation. Infinite level of truncations, related to homotopy theory. Note that types like isSet and isEquiv are propositions. AC and LEM related to truncation levels. Univalence contradicts UIP.}{9}{section*.17}\protected@file@percent }
\pgfsyspdfmark {pgfid12}{20088094}{21291132}
\@writefile{tdo}{\contentsline {todo}{\color@fb@x {}{black}{}{orange!40}{\leavevmode {\color  {orange!40}o}}\ UP of prop. truncation: $A$ type, $f:A\to P$, $P$ proposition s.t. for any other proposition $Q$ the precomposition map (w/$f$) is an equivalence of the function types.}{9}{section*.18}\protected@file@percent }
\pgfsyspdfmark {pgfid13}{20088094}{19570804}
\gdef \@abspage@last{9}
